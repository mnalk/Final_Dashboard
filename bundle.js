(function (React$1, ReactDOM, d3, topojson, styles_css, Tippy) {
  'use strict';

  var React$1__default = 'default' in React$1 ? React$1['default'] : React$1;
  ReactDOM = ReactDOM && Object.prototype.hasOwnProperty.call(ReactDOM, 'default') ? ReactDOM['default'] : ReactDOM;
  Tippy = Tippy && Object.prototype.hasOwnProperty.call(Tippy, 'default') ? Tippy['default'] : Tippy;

  const jsonUrl = 'https://unpkg.com/world-atlas@2.0.2/countries-50m.json';

  const useWorldAtlas = () => {
    const [data, setData] = React$1.useState(null);

    React$1.useEffect(() => {
      d3.json(jsonUrl, topology => {
        const { countries, land } = topology.objects;
        setData({
          land: topojson.feature(topology, land),
          interiors: topojson.mesh(topology, countries, (a, b) => a !== b)
        });
      });
    }, []);

    return data;
  };

  const csvUrl =
    'https://gist.githubusercontent.com/mnalk/d680a8dd53bbdcdd3b3a696c54d8a430/raw/3d542004b4f7f187d61acdf1f743d239dadb86d5/time.csv';

  const row = d => {
    d.coords = d['Location_Coordinates'].split(',').map(d => +d).reverse();
    d['suicides_no'] = + d['suicides_no'];
    d['year'] = new Date(d['year']);
    return d;
  };

  const useData = () => {
    const [data, setData] = React$1.useState(null);

    React$1.useEffect(() => {
      d3.csv(csvUrl, row, data => setData(data));
    }, []);

    return data;
  };

  const projection = d3.geoNaturalEarth1();
  const path = d3.geoPath(projection);
  const graticule = d3.geoGraticule();
  const colorScale = d3.scaleOrdinal(d3.schemeCategory10);



  const Marks = ({
    worldAtlas: { land, interiors },
    data,
    sizeScale,
    sizeValue
  }) => (
    React$1__default.createElement( 'g', { className: "marks" },
      React$1.useMemo(
        () => (
          React$1__default.createElement( React$1__default.Fragment, null,
            React$1__default.createElement( 'path', { className: "sphere", d: path({ type: 'Sphere' }) }),
            React$1__default.createElement( 'path', { className: "graticules", d: path(graticule()) }),
            land.features.map(feature => (
              React$1__default.createElement( 'path', { className: "land", d: path(feature) })
            )),
            React$1__default.createElement( 'path', { className: "interiors", d: path(interiors) })
          )
        ),
        [path, graticule, land, interiors]
      ),
      data.map(d => {
        const [x, y] = projection(d.coords);
          return (
        React$1__default.createElement( Tippy, { theme: 'suicide', animation: 'perspective', placement: 'bottom', content: React$1__default.createElement( 'span', null,
                React$1__default.createElement( 'strong', null,
                  ('Country:')+(d.country)+' '+(',')+
                    ('Gdp per capita:')+(d.gdp_per_capita)+' '+','+
                    ('Gdp for year:')+(d.gdp_for_year)+' '+','+
                    ('Suicides pop:')+(d.suicides_pop)+' '+','+
                    ('Population:')+(d.population)+'.'
                )
              ) },
            React$1__default.createElement( 'g', null,
              ' ',
              React$1__default.createElement( 'circle', {
                cx: x, cy: y, fill: colorScale(d.suicides_no), r: sizeScale(sizeValue(d)), title: d.country + ' ' + d.suicides_no })
            )
          )
        );
      })
    )
  );

  const sizeValue = d => d['suicides_no'];
  const maxRadius = 15;

  const BubbleMap = ({ data, filteredData, worldAtlas }) => {
    const sizeScale = React$1.useMemo(
      () =>
        d3.scaleSqrt()
          .domain([0, d3.max(data, sizeValue)])
          .range([0, maxRadius]),
      [data, sizeValue, maxRadius]
    );

    return (
      React$1__default.createElement( Marks, {
        worldAtlas: worldAtlas, data: filteredData, sizeScale: sizeScale, sizeValue: sizeValue })
    );
  };

  const AxisBottom = ({ xScale, innerHeight, tickFormat, tickOffset = 3 }) =>
    xScale.ticks().map(tickValue => (
      React.createElement( 'g', {
        className: "tick", key: tickValue, transform: `translate(${xScale(tickValue)},0)` },
        React.createElement( 'line', { y2: innerHeight }),
        React.createElement( 'text', { style: { textAnchor: 'middle' }, dy: ".71em", y: innerHeight + tickOffset },
          tickFormat(tickValue)
        )
      )
    ));

  const AxisLeft = ({ yScale, innerWidth, tickOffset = 3 }) =>
    yScale.ticks().map(tickValue => (
      React.createElement( 'g', { className: "tick", transform: `translate(0,${yScale(tickValue)})` },
        React.createElement( 'line', { x2: innerWidth }),
        React.createElement( 'text', {
          key: tickValue, style: { textAnchor: 'end' }, x: -tickOffset, dy: ".32em" },
          tickValue
        )
      )
    ));

  const Marks$1 = ({
    binnedData,
    xScale,
    yScale,
    tooltipFormat,
    innerHeight
  }) =>
    binnedData.map(d => (
      React.createElement( 'rect', {
        className: "mark", x: xScale(d.x0), y: yScale(d.y), width: xScale(d.x1) - xScale(d.x0), height: innerHeight - yScale(d.y) },
        React.createElement( 'title', null, tooltipFormat(d.y) )
      )
    ));

  const margin = { top: 0, right: 30, bottom: 20, left: 45 };
  const xAxisLabelOffset = 54;
  const yAxisLabelOffset = 30;
  const xAxisTickFormat = d3.timeFormat('%m/%d/%Y');

  const xAxisLabel = 'Time';

  const yValue = d => d['suicides_no'];
  const yAxisLabel = 'suicides_no';

  const DateHistogram = ({
    data,
    width,
    height,
    setBrushExtent,
    xValue
  }) => {
    const innerHeight = height - margin.top - margin.bottom;
    const innerWidth = width - margin.left - margin.right;

    const xScale = React$1.useMemo(
      () =>
        d3.scaleTime()
          .domain(d3.extent(data, xValue))
          .range([0, innerWidth])
          .nice(),
      [data, xValue, innerWidth]
    );

    const binnedData = React$1.useMemo(() => {
      const [start, stop] = xScale.domain();
      return d3.histogram()
        .value(xValue)
        .domain(xScale.domain())
        .thresholds(d3.timeMonths(start, stop))(data)
        .map(array => ({
          y: d3.sum(array, yValue),
          x0: array.x0,
          x1: array.x1
        }));
    }, [xValue, yValue, xScale, data]);

    const yScale = React$1.useMemo(
      () =>
        d3.scaleLinear()
          .domain([0, d3.max(binnedData, d => d.y)])
          .range([innerHeight, 0]),
      [binnedData, innerHeight]
    );

    const brushRef = React$1.useRef();

    React$1.useEffect(() => {
      const brush = d3.brushX().extent([[0, 0], [innerWidth, innerHeight]]);
      brush(d3.select(brushRef.current));
      brush.on('brush end', () => {
        setBrushExtent(d3.event.selection && d3.event.selection.map(xScale.invert));
      });
    }, [innerWidth, innerHeight]);

    return (
      React.createElement( React.Fragment, null,
        React.createElement( 'rect', { width: width, height: height, fill: "white" }),
        React.createElement( 'g', { transform: `translate(${margin.left},${margin.top})` },
          React.createElement( AxisBottom, {
            xScale: xScale, innerHeight: innerHeight, tickFormat: xAxisTickFormat, tickOffset: 5 }),
          React.createElement( 'text', {
            className: "axis-label", textAnchor: "middle", transform: `translate(${-yAxisLabelOffset},${innerHeight /
            2}) rotate(-90)` },
            yAxisLabel
          ),
          React.createElement( AxisLeft, { yScale: yScale, innerWidth: innerWidth, tickOffset: 5 }),
          React.createElement( 'text', {
            className: "axis-label", x: innerWidth / 2, y: innerHeight + xAxisLabelOffset, textAnchor: "middle" },
            xAxisLabel
          ),
          React.createElement( Marks$1, {
            binnedData: binnedData, xScale: xScale, yScale: yScale, tooltipFormat: d => d, circleRadius: 2, innerHeight: innerHeight }),
          React.createElement( 'g', { ref: brushRef })
        )
      )
    );
  };

  const width = 960;
  const height = 500;
  const dateHistogramSize = 0.2;

  const xValue = d => d['year'];

  const App = () => {
    const worldAtlas = useWorldAtlas();
    const data = useData();
    const [brushExtent, setBrushExtent] = React$1.useState();

    if (!worldAtlas || !data) {
      return React$1__default.createElement( 'pre', null, "Loading..." );
    }

    const filteredData = brushExtent
      ? data.filter(d => {
          const date = xValue(d);
          return date > brushExtent[0] && date < brushExtent[1];
        })
      : data;

    return (
      React$1__default.createElement( 'svg', { width: width, height: height },
        React$1__default.createElement( BubbleMap, {
          data: data, filteredData: filteredData, worldAtlas: worldAtlas }),
        React$1__default.createElement( 'g', { transform: `translate(0, ${height - dateHistogramSize * height})` },
          React$1__default.createElement( DateHistogram, {
            data: data, width: width, height: dateHistogramSize * height, setBrushExtent: setBrushExtent, xValue: xValue })
        )
      )
    );
  };
  const rootElement = document.getElementById('root');
  ReactDOM.render(React$1__default.createElement( App, null ), rootElement);

  tippy('#btn-html', {
      content: '<span class="tooltip-span">Features of this tooltip:</span><ul><li>I have a list inside</li><li>I am on the right</li></ul>',
    theme: 'custom',
    arrow: false,
    placement: 'top',
  });

}(React, ReactDOM, d3, topojson, null, Tippy));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,